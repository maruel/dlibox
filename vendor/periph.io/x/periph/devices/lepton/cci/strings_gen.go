// Code generated by "stringer -output=strings_gen.go -type=CameraStatus,command,FFCShutterMode,FFCState,ShutterPos,ShutterTempLockoutState"; DO NOT EDIT.
// then manually modified to remove golint errors. :)

package cci

import "fmt"

const cameraStatusName = "SystemReadySystemInitializingSystemInLowPowerModeSystemGoingIntoStandbySystemFlatFieldInProcess"

var cameraStatusIndex = [...]uint8{0, 11, 29, 49, 71, 95}

func (i CameraStatus) String() string {
	if i >= CameraStatus(len(cameraStatusIndex)-1) {
		return fmt.Sprintf("CameraStatus(%d)", i)
	}
	return cameraStatusName[cameraStatusIndex[i]:cameraStatusIndex[i+1]]
}

const commandName = "agcEnableagcRoiSelectagcHistogramStatsagcHeqDampFactoragcHeqClipLimitHighagcHeqClipLimitLowagcHeqEmptyCountsagcHeqOutputScaleFactoragcCalculationEnablesysPingsysStatussysSerialNumbersysUptimesysHousingTemperaturesysTemperaturesysTelemetryEnablesysTelemetryLocationsysExecuteFrameAveragesysFlatFieldFramessysCustomSerialNumbersysRoiSceneStatssysRoiSceneSelectsysThermalShutdownCountsysShutterPositionsysFFCModesysFCCRunNormalizationsysFCCStatusvidColorLookupSelectvidColorLookupTransfervidFocusCalculationEnablevidFocusRoiSelectvidFocusMetricThresholdvidFocusMetricGetvidVideoFreezeEnableoemShutterProfileoemPowerDownoemPartNumberoemSoftwareRevisionoemVideoOutputEnableoemVideoOutputFormatoemVideoOutputSourceoemCustomerPartNumberoemVideoOutputConstoemCameraRebootoemFCCNormalizationTargetoemStatusoemFrameMeanIntensityoemGPIOModeSelectoemGPIOVSyncPhaseDelayoemUserDefaultsoemRestoreUserDefaultsoemThermalShutdownEnableoemBadPixeloemTemporalFilteroemColumnNoiseFilteroemPixelNoiseFilter"

var commandMap = map[command]string{
	256:   commandName[0:9],
	264:   commandName[9:21],
	268:   commandName[21:38],
	292:   commandName[38:54],
	300:   commandName[54:73],
	304:   commandName[73:91],
	316:   commandName[91:108],
	324:   commandName[108:131],
	328:   commandName[131:151],
	512:   commandName[151:158],
	516:   commandName[158:167],
	520:   commandName[167:182],
	524:   commandName[182:191],
	528:   commandName[191:212],
	532:   commandName[212:226],
	536:   commandName[226:244],
	540:   commandName[244:264],
	544:   commandName[264:286],
	548:   commandName[286:304],
	552:   commandName[304:325],
	556:   commandName[325:341],
	560:   commandName[341:358],
	564:   commandName[358:381],
	568:   commandName[381:399],
	572:   commandName[399:409],
	576:   commandName[409:431],
	580:   commandName[431:443],
	772:   commandName[443:463],
	776:   commandName[463:485],
	780:   commandName[485:510],
	784:   commandName[510:527],
	788:   commandName[527:550],
	792:   commandName[550:567],
	804:   commandName[567:587],
	16484: commandName[587:604],
	18432: commandName[604:616],
	18460: commandName[616:629],
	18464: commandName[629:648],
	18468: commandName[648:668],
	18472: commandName[668:688],
	18476: commandName[688:708],
	18488: commandName[708:729],
	18492: commandName[729:748],
	18496: commandName[748:763],
	18500: commandName[763:788],
	18504: commandName[788:797],
	18508: commandName[797:818],
	18516: commandName[818:835],
	18520: commandName[835:857],
	18524: commandName[857:872],
	18528: commandName[872:894],
	18536: commandName[894:918],
	18540: commandName[918:929],
	18544: commandName[929:946],
	18548: commandName[946:966],
	18552: commandName[966:985],
}

func (i command) String() string {
	if str, ok := commandMap[i]; ok {
		return str
	}
	return fmt.Sprintf("command(%d)", i)
}

const ffcShutterModeName = "FFCShutterModeManualFFCShutterModeAutoFFCShutterModeExternal"

var ffcShutterModeIndex = [...]uint8{0, 20, 38, 60}

func (i FFCShutterMode) String() string {
	if i >= FFCShutterMode(len(ffcShutterModeIndex)-1) {
		return fmt.Sprintf("FFCShutterMode(%d)", i)
	}
	return ffcShutterModeName[ffcShutterModeIndex[i]:ffcShutterModeIndex[i+1]]
}

const ffcStateName = "FFCNeverFFCInProgressFFCComplete"

var ffcStateIndex = [...]uint8{0, 8, 21, 32}

func (i FFCState) String() string {
	if i >= FFCState(len(ffcStateIndex)-1) {
		return fmt.Sprintf("FFCState(%d)", i)
	}
	return ffcStateName[ffcStateIndex[i]:ffcStateIndex[i+1]]
}

const (
	shutterPosName0 = "ShutterPosIdleShutterPosOpenShutterPosClosedShutterPosBrakeOn"
	shutterPosName1 = "ShutterPosUnknown"
)

var shutterPosIndex0 = [...]uint8{0, 14, 28, 44, 61}

func (i ShutterPos) String() string {
	switch {
	case 0 <= i && i <= 3:
		return shutterPosName0[shutterPosIndex0[i]:shutterPosIndex0[i+1]]
	case i == 4294967295:
		return shutterPosName1
	default:
		return fmt.Sprintf("ShutterPos(%d)", i)
	}
}

const shutterTempLockoutStateName = "ShutterTempLockoutStateInactiveShutterTempLockoutStateHighShutterTempLockoutStateLow"

var shutterTempLockoutStateIndex = [...]uint8{0, 31, 58, 84}

func (i ShutterTempLockoutState) String() string {
	if i >= ShutterTempLockoutState(len(shutterTempLockoutStateIndex)-1) {
		return fmt.Sprintf("ShutterTempLockoutState(%d)", i)
	}
	return shutterTempLockoutStateName[shutterTempLockoutStateIndex[i]:shutterTempLockoutStateIndex[i+1]]
}
